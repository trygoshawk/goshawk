!function(){"use strict";const t="function";function e(e,n){return class{constructor(s){const i=t=>{if(this.pendingData){const e=this.pendingData;this.pendingData=new Uint8Array(e.length+t.length),this.pendingData.set(e,0),this.pendingData.set(t,e.length)}else this.pendingData=new Uint8Array(t)};if(this.codec=new e(Object.assign({},n,s)),typeof this.codec.onData==t)this.codec.onData=i;else{if(typeof this.codec.on!=t)throw new Error("Cannot register the callback function");this.codec.on("data",i)}}async append(t){return this.codec.push(t),s(this)}async flush(){return this.codec.push(new Uint8Array(0),!0),s(this)}};function s(t){if(t.pendingData){const e=t.pendingData;return t.pendingData=null,e}return new Uint8Array(0)}}class n{constructor(){this.crc=-1,this.table=(()=>{const t=[];for(let e=0;e<256;e++){let n=e;for(let t=0;t<8;t++)1&n?n=n>>>1^3988292384:n>>>=1;t[e]=n}return t})()}append(t){const e=this.table;let n=0|this.crc;for(let s=0,i=0|t.length;s<i;s++)n=n>>>8^e[255&(n^t[s])];this.crc=n}get(){return~this.crc}}const s="Invalid pasword",i=16,a="raw",r={name:"PBKDF2"},c={name:"HMAC"},h="SHA-1",p={name:"AES-CTR"},o=Object.assign({hash:c},r),u=Object.assign({iterations:1e3,hash:{name:h}},r),d=Object.assign({hash:h},c),l=Object.assign({length:i},p),y=["deriveBits"],g=["sign"],w=528,f=10,b=[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],A=crypto.subtle;class U{constructor(t,e){this.password=t,this.signed=e,this.input=e&&new Uint8Array(0),this.pendingInput=new Uint8Array(0)}async append(t){const e=async(s=0)=>{if(s+i<=r.length-f){const t=r.subarray(s,s+i),a=await A.decrypt(Object.assign({counter:this.counter},l),this.keys.decrypt,t);return D(this.counter),n.set(new Uint8Array(a),s),e(s+i)}return this.pendingInput=r.subarray(s),this.signed&&(this.input=I(this.input,t)),n};if(this.password){const e=t.subarray(0,18);await async function(t,e,n){t.counter=new Uint8Array(b);const i=e.subarray(0,16),r=e.subarray(16),c=(new TextEncoder).encode(n),h=await A.importKey(a,c,o,!1,y),l=await A.deriveBits(Object.assign({salt:i},u),h,528),w=new Uint8Array(l),f=w.subarray(64);if(t.keys={decrypt:await A.importKey(a,w.subarray(0,32),p,!0,["decrypt"]),authentication:await A.importKey(a,w.subarray(32,64),d,!1,g),passwordVerification:f},f[0]!=r[0]||f[1]!=r[1])throw new Error(s)}(this,e,this.password),this.password=null,t=t.subarray(18)}let n=new Uint8Array(t.length-f-(t.length-f)%i),r=t;return this.pendingInput.length&&(r=I(this.pendingInput,t),n=k(n,r.length-f-(r.length-f)%i)),e()}async flush(){const t=this.pendingInput,e=this.keys,n=t.subarray(0,t.length-f),s=t.subarray(t.length-f);let i=new Uint8Array(0);if(n.length){const t=await A.decrypt(Object.assign({counter:this.counter},l),e.decrypt,n);i=new Uint8Array(t)}let a=!0;if(this.signed){const t=await A.sign(c,e.authentication,this.input.subarray(0,this.input.length-f)),n=new Uint8Array(t);this.input=null;for(let t=0;t<f;t++)n[t]!=s[t]&&(a=!1)}return{valid:a,data:i}}}class m{constructor(t){this.password=t,this.output=new Uint8Array(0),this.pendingInput=new Uint8Array(0)}async append(t){const e=async(a=0)=>{if(a+i<=t.length){const r=t.subarray(a,a+i),c=await A.encrypt(Object.assign({counter:this.counter},l),this.keys.encrypt,r);return D(this.counter),s.set(new Uint8Array(c),a+n.length),e(a+i)}return this.pendingInput=t.subarray(a),this.output=I(this.output,s),s};let n=new Uint8Array(0);this.password&&(n=await async function(t,e){t.counter=new Uint8Array(b);const n=crypto.getRandomValues(new Uint8Array(16)),s=(new TextEncoder).encode(e),i=await A.importKey(a,s,o,!1,y),r=await A.deriveBits(Object.assign({salt:n},u),i,w),c=new Uint8Array(r);return t.keys={encrypt:await A.importKey(a,c.subarray(0,32),p,!0,["encrypt"]),authentication:await A.importKey(a,c.subarray(32,64),d,!1,g),passwordVerification:c.subarray(64)},I(n,t.keys.passwordVerification)}(this,this.password),this.password=null);let s=new Uint8Array(n.length+t.length-t.length%i);return s.set(n,0),this.pendingInput.length&&(t=I(this.pendingInput,t),s=k(s,t.length-t.length%i)),e()}async flush(){let t=new Uint8Array(0);if(this.pendingInput.length){const e=await A.encrypt(Object.assign({counter:this.counter},l),this.keys.encrypt,this.pendingInput);t=new Uint8Array(e),this.output=I(this.output,t)}const e=await A.sign(c,this.keys.authentication,this.output.subarray(18));this.output=null;const n=new Uint8Array(e).subarray(0,f);return{data:I(t,n),signature:n}}}function D(t){for(let e=0;e<16;e++){if(255!=t[e]){t[e]++;break}t[e]=0}}function I(t,e){let n=t;return t.length+e.length&&(n=new Uint8Array(t.length+e.length),n.set(t,0),n.set(e,t.length)),n}function k(t,e){if(e&&e>t.length){const n=t;(t=new Uint8Array(e)).set(n,0)}return t}const v="Invalid signature";class E{constructor(t){this.signature=t.inputSignature,this.encrypted=Boolean(t.inputPassword),this.signed=t.inputSigned,this.compressed=t.inputCompressed,this.inflate=this.compressed&&new ZipInflate,this.crc32=this.signed&&this.signed&&new n,this.decrypt=this.encrypted&&new U(t.inputPassword)}async append(t){return this.encrypted&&(t=await this.decrypt.append(t)),this.compressed&&t.length&&(t=await this.inflate.append(t)),!this.encrypted&&this.signed&&this.crc32.append(t),t}async flush(){let t,e=new Uint8Array(0);if(this.encrypted){const t=await this.decrypt.flush();if(!t.valid)throw new Error(v);e=t.data}else if(this.signed){const e=new DataView(new Uint8Array(4).buffer);if(t=this.crc32.get(),e.setUint32(0,t),this.signature!=e.getUint32(0,!1))throw new Error(v)}return this.compressed&&(e=await this.inflate.append(e)||new Uint8Array(0),await this.inflate.flush()),{data:e,signature:t}}}class j{constructor(t){this.encrypted=t.outputEncrypted,this.signed=t.outputSigned,this.compressed=t.outputCompressed,this.deflate=this.compressed&&new ZipDeflate({level:t.level||5}),this.crc32=this.signed&&new n,this.encrypt=this.encrypted&&new m(t.outputPassword)}async append(t){let e=t;return this.compressed&&t.length&&(e=await this.deflate.append(t)),this.encrypted?e=await this.encrypt.append(e):this.signed&&this.crc32.append(t),e}async flush(){let t,e=new Uint8Array(0);if(this.compressed&&(e=await this.deflate.flush()||new Uint8Array(0)),this.encrypted){e=await this.encrypt.append(e);const n=await this.encrypt.flush();t=n.signature;const s=new Uint8Array(e.length+n.data.length);s.set(e,0),s.set(n.data,e.length),e=s}else this.signed&&(t=this.crc32.get());return{data:e,signature:t}}}const O={init(t){t.scripts&&t.scripts.length>0&&t.scripts.length&&importScripts.apply(void 0,t.scripts);const e=t.options;self.initExternalCodec&&self.initExternalCodec(),C=function(t){return t.codecType.startsWith("deflate")?new j(t):t.codecType.startsWith("inflate")?new E(t):void 0}(e)},append:async t=>({data:await C.append(t.data)}),flush:()=>C.flush()};let C;addEventListener("message",(async t=>{const e=t.data,n=e.type,s=O[n];if(s)try{const t=await s(e)||{};if(t.type=n,t.data)try{postMessage(t,[t.data.buffer])}catch(e){postMessage(t)}else postMessage(t)}catch(t){postMessage({type:n,error:{message:t.message,stack:t.stack}})}})),self.initExternalCodec=()=>{const{ZipDeflate:t,ZipInflate:n}=((t,n={})=>({ZipDeflate:e(t.Deflate,n.deflate),ZipInflate:e(t.Inflate,n.inflate)}))(pako,{deflate:{raw:!0},inflate:{raw:!0}});self.ZipDeflate=t,self.ZipInflate=n}}();
